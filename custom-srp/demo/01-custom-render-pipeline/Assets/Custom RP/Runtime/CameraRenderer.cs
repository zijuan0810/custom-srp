using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.Rendering;public partial class CameraRenderer{	ScriptableRenderContext context;	Camera camera;	const string bufferName = "Render Camera";	CommandBuffer buffer = new CommandBuffer { name = bufferName };	CullingResults cullingResults;	static ShaderTagId unlitShaderTagId = new ShaderTagId("SRPDefaultUnlit");		public void Render(ScriptableRenderContext context, Camera camera)	{		this.context = context;		this.camera = camera;

		//As that might add geometry to the scene it has to be done before culling
		PrepareBuffer();
		PrepareForSceneWindow();

		if (!Cull())			return;		Setup();		DrawVisibleGeometry();		DrawUnsupportedShaders();		DrawGizmos();		Submit();	}	private bool Cull()	{		if (camera.TryGetCullingParameters(out ScriptableCullingParameters  p))		{			cullingResults = context.Cull(ref p);			return true;		}		return false;	}	private void Setup()	{		context.SetupCameraProperties(camera);
		//From 1 to 4 they are Skybox, Color, Depth, and Nothing.
		CameraClearFlags flags = camera.clearFlags;		buffer.ClearRenderTarget(			flags <= CameraClearFlags.Depth,
			flags == CameraClearFlags.Color,			flags == CameraClearFlags.Color ? camera.backgroundColor.linear : Color.clear);		buffer.BeginSample(SampleName);		ExecuteBuffer();	}	private void Submit()	{		buffer.EndSample(SampleName);		ExecuteBuffer();		context.Submit();	}	private void ExecuteBuffer()	{		context.ExecuteCommandBuffer(buffer);		buffer.Clear();	}	private void DrawVisibleGeometry()	{		var sortingSettins = new SortingSettings(camera) { criteria = SortingCriteria.CommonOpaque };		var drawingSettings = new DrawingSettings(unlitShaderTagId, sortingSettins);		var filteringSettings = new FilteringSettings(RenderQueueRange.opaque);		context.DrawRenderers(cullingResults, ref drawingSettings, ref filteringSettings);		context.DrawSkybox(camera);		sortingSettins.criteria = SortingCriteria.CommonTransparent;		drawingSettings.sortingSettings = sortingSettins;		filteringSettings.renderQueueRange = RenderQueueRange.transparent;		context.DrawRenderers(cullingResults, ref drawingSettings, ref filteringSettings);	}}